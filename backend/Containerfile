# Use the official Golang image to create a build artifact.
FROM docker.io/library/golang:1.23 as builder

# Set the Current Working Directory inside the container
WORKDIR /go/src/app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Test the Go app
RUN go vet -v 
RUN go test -v

# Build the Go app
#RUN CGO_ENABLED=0 go build -o /go/bin/app
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o /go/bin/app .

# Start a new stage from scratch
FROM gcr.io/distroless/static-debian12

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /go/bin/app /app/main

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["/app/main"]